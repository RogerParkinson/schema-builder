<!--
  Copyright 2010 Prometheus Consulting
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!--
	DO NOT EDIT THIS FILE
	It is injected into the project from outside and needs to be kept standard.
	If you need to re-implement anything in here put it into build.xml, renaming the target etc.
	
	Assumes the following properties are set up:
	(these are only needed if you are uploading a new build to google)
	svn.username your login name for svn
	svn.password your password for svn
	
	repo.dir address of your local ivy repository - only used by the local-repo target
	
	If you are using Eclipse then please run the test_copy target in the build using ant
	This will populate your ivy cache correctly and compiles from Eclipse will work then.
	
-->
<project xmlns:ivy="urn:ivy-ant">

	<property name="package.dir" value="${basedir}/temp/package" />
	<property name="ivy.install.version" value="2.1.0" />
	<property name="ivy.resolve" value="${basedir}/ivy.xml" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.settings" value="file://${basedir}/ivysettings.xml"/>
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<basename property="project.name" file="${basedir}"/>
	<property name="junit.show.output" value="false"/>
	<property name="javac.compile.debug" value="no"/>
	<property name="javac.compile.deprecation" value="no"/>
	<property name="junit.tests" value="**/*Test.java"/>
	<property name="package.target" value="${basedir}/temp/package"/>
	<property name="classes.target" value="${basedir}/bin"/>
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
		<format property="year" pattern="yyyy" />
	</tstamp>

	<property name="suppress.retrieve-dependencies" value="false"/>
	<condition property="suppress.retrieve-dependencies-true" value="true">
		<istrue value="${suppress.retrieve-dependencies}"/>
	</condition>

	<condition property="ivy.already.downloaded">
		<or>
	      <available file="${ivy.jar.dir}/ivy-${ivy.install.version}.jar"/>
	      <available resource="org/apache/ivy/ant/antlib.xml"/>
		</or>
	</condition>

	<property name="buildproperties" value="${ant.project.name}.properties"/>
	<property name="results.dir" value="${basedir}/temp/results"/>
	<property name="javadoc.dir" value="${basedir}/temp/javadoc"/>

	<target name="download-ivy" unless="ivy.already.downloaded">
		<mkdir dir="${ivy.jar.dir}"/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.dir}/ivy-${ivy.install.version}.jar" usetimestamp="true" />
		<echo>ivy download complete.</echo>
	</target>
	
	<target name="init-ivy" depends="download-ivy">
		<typedef resource="org/apache/ivy/ant/antlib.xml" uri="urn:ivy-ant">
			<classpath>
				<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		    </classpath>
		 </typedef>
		<ivy:settings url="${ivy.settings}"/>
		<ivy:resolve file="${ivy.resolve}"/>
	</target>

	<macrodef name="manifest-macro">
		<attribute name="manifest.dir" default="${results.dir}"/>
		<attribute name="buildproperties" default="${buildproperties}"/>
		<attribute name="build.version" default="${build.version}"/>
	<sequential>
		<echo>Writing manifest into @{manifest.dir}/MANIFEST.MF</echo>
		<mkdir dir="@{manifest.dir}"/>
		<manifest file="@{manifest.dir}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Implementation-Version" 
				value="${build.version}"/>   
			<attribute name="Implementation-Title" 
				value="${project.name}"/>   
			<attribute name="Implementation-Vendor" 
				value="${build.company}"/>   
  			<attribute name="Built-Date" value="${TODAY}"/>                 
		</manifest>
	</sequential>
	</macrodef>

	<macrodef name="updatebuild-macro">
		<attribute name="buildproperties" default="${buildproperties}"/>
		<attribute name="build.version" default="${build.version}"/>
		<attribute name="dir" default="${classes.target}"/>
	<sequential>
		<exec executable="svn" outputproperty="revision.number">
		    <arg line="info"/>
		    <redirector>
		        <outputfilterchain>
		            <linecontainsregexp>
		                <regexp pattern='^Revision:' />
		            </linecontainsregexp>
		            <tokenfilter>
		                <replaceregex pattern='[\D]+([\d]+)' replace="\1" />
		            </tokenfilter>
		        </outputfilterchain>
		    </redirector>
		</exec>
		
		<propertyfile
		    file="@{dir}/@{buildproperties}"
		    comment="Build properties">
		  <entry  key="revision.number" value="${revision.number}"/>
		  <entry  key="build.date" type="date" value="now" pattern="dd MMM yyyy HH:mm"/>
		  <entry  key="build.version" type="string" value="@{build.version}"/>
		</propertyfile>
	</sequential>
	</macrodef>

	<macrodef name="javadoc-macro">
		<attribute name="target.dir" default="${javadoc.dir}"/>
		<attribute name="build.version" default="${build.version}"/>
	<sequential>
		<delete dir="@{target.dir}" failonerror="false"/>
		<mkdir dir="@{target.dir}"/>
		<mkdir dir="${results.dir}"/>
		<javadoc packagenames="nz.co.senanque.*"
					classpathref="libs"
		           sourcepath="${srcpath}"
		           defaultexcludes="yes"
		           destdir="@{target.dir}"
		           author="true"
		           version="true"
		           use="true"
		           windowtitle="${project.name}">
			<bottom><![CDATA[<i>Copyright &#169; ${year} ${build.company}. All Rights Reserved.</i>]]></bottom>
		  </javadoc>
		<zip destfile="${results.dir}/${ant.project.name}-javadocs.zip" basedir="@{target.dir}"/>
	</sequential>
	</macrodef>
	
	<macrodef name="ivyroundup-macro">
		<attribute name="target.dir" default="${package.dir}"/>
		<attribute name="project.name" default="${ant.project.name}"/>
		<attribute name="build.version" default="${build.version}"/>
		<attribute name="dist.url" default="http://${ant.project.name}.googlecode.com/files"/>
	<sequential>
		<echo>ivyroundup-macro</echo>
		<delete dir="@{target.dir}" failonerror="false"/>
		<mkdir dir="@{target.dir}"/>
		<copy tofile="@{target.dir}/@{project.name}-javadocs-@{build.version}.zip" file="${results.dir}/@{project.name}-javadocs.zip"/>
		<copy tofile="@{target.dir}/@{project.name}-source-@{build.version}.zip" file="${results.dir}/@{project.name}-source.zip"/>
		<copy tofile="@{target.dir}/@{project.name}-@{build.version}.jar" file="${results.dir}/@{project.name}.jar"/>
		<zip destfile="@{target.dir}/@{project.name}-@{build.version}.zip" >
			<zipfileset dir="@{target.dir}">
				<include name="@{project.name}-source-@{build.version}.zip"/>
				<include name="@{project.name}-javadocs-@{build.version}.zip"/>
				<include name="@{project.name}-${build.version}.jar"/>
			</zipfileset>
			<zipfileset file="./temp/pdf/${project.name}.pdf"/>
		</zip>
		<checksum algorithm="sha1" file="@{target.dir}/@{project.name}-@{build.version}.zip" property="sha1"/>
		<copy file="packager-template.xml" tofile="@{target.dir}/packager.xml" overwrite="true">
			  <filterchain>
			    <filterreader classname="org.apache.tools.ant.filters.TabsToSpaces"/>
			  </filterchain>
			<filterset>
				<filter token="sha1" value="${sha1}"/>
				<filter token="dist.url" value="@{dist.url}"/>
				<filter token="timestamp" value="${timestamp}"/>
				<filter token="ant.project.name" value="${ant.project.name}"/>
				<filter token="project.name" value="${project.name}"/>
			</filterset>
		</copy>
		  <tstamp>
		    <format pattern="yyyyMMddhhmmss" property="timestamp"/>
		  </tstamp>
		<copy file="ivy-template.xml" tofile="@{target.dir}/ivy.xml" overwrite="true">
			  <filterchain>
			    <filterreader classname="org.apache.tools.ant.filters.TabsToSpaces"/>
			  </filterchain>
			<filterset>
				<filter token="sha1" value="${sha1}"/>
				<filter token="dist.url" value="@{dist.url}"/>
				<filter token="timestamp" value="${timestamp}"/>
				<filter token="ant.project.name" value="${ant.project.name}"/>
				<filter token="project.name" value="${project.name}"/>
			</filterset>
		</copy>
		<echo>ivyroundup-macro completed</echo>
	</sequential>
	</macrodef>

	<macrodef name="source-macro">
		<attribute name="project.name" default="${ant.project.name}"/>
	<sequential>
		<mkdir dir="${results.dir}/"/>
		<zip destfile="${results.dir}/@{project.name}-source.zip" >
			<zipfileset dir="./src" prefix="src"/>
			<zipfileset dir="./test" prefix="test"/>
			<zipfileset dir="./docs" prefix="docs"/>
		</zip>
	</sequential>
	</macrodef>
	
	<target name="CopyToRemoteRepo">
		<echo>Copying repo files to ${repo.dir}/${ant.project.name}/${build.version}</echo>
		<mkdir dir="${repo.dir}/${ant.project.name}/${build.version}"/>
		<copy overwrite="true" todir="${repo.dir}/${ant.project.name}/${build.version}">
			<fileset file="${basedir}/temp/package/ivy.xml"/>
			<fileset file="${basedir}/temp/package/packager.xml"/>
		</copy>
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="gcupload">
			  <classpath>
			  	<fileset dir="${basedir}/temp/buildlib" includes="*.jar" />
			  </classpath>
		</taskdef>
		<gcupload 
		        username="${svn.username}" 
		        password="${svn.password}" 
		        projectname="${ant.project.name}" 
		        filename="${basedir}/temp/pdf/${project.name}.pdf" 
		        targetfilename="${project.name}-${build.version}.pdf"
		        summary="Documentation"/>
		<gcupload 
		        username="${svn.username}" 
		        password="${svn.password}" 
		        projectname="${ant.project.name}" 
		        filename="${basedir}/temp/package/${ant.project.name}-${build.version}.zip" 
		        targetfilename="${ant.project.name}-${build.version}.zip"
		        summary="Packaged for ivyroundup and general use "/>
		<property file="${classes.target}/${ant.project.name}.properties"/>
		<echo message="Revison Number  ${revision.number}"/>		
		<echo message="Build Date    ${build.date}"/>		
		<echo message="Build Version ${build.version}"/>
	</target>

	<target name="upload-docs" depends="retrieve-dependencies,docs">
		<echo>Uploading ${project.name}-${build.version}.pdf to google</echo>
		<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="gcupload">
			  <classpath>
			  	<fileset dir="${basedir}/temp/buildlib" includes="*.jar" />
			  </classpath>
		</taskdef>
		<gcupload 
		        username="${svn.username}" 
		        password="${svn.password}" 
		        projectname="${ant.project.name}" 
		        filename="${basedir}/temp/pdf/${project.name}.pdf" 
		        targetfilename="${project.name}-${build.version}.pdf"
		        summary="Documentation"/>
	</target>

	<target name="compile-distribute-source">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			  <classpath>
			  	<fileset dir="${basedir}/temp/buildlib" includes="*.jar" />
			  </classpath>
		</taskdef>
		<mkdir dir="${classes.target}"/>
		<javac destdir="${classes.target}" debug="${javac.compile.debug}" deprecation="${javac.compile.deprecation}" target="${javac.compile.target}" srcdir="${srcpath}">
			<classpath>
				<path refid="libs"/>
			</classpath>
		</javac>
		<foreach delimiter=":" list="${srcpath}" param="d" target="copysource"/>
		<updatebuild-macro/>
	</target>
	
	<target name="copysource">
		<copy verbose="true" todir="${classes.target}" flatten="no" >
			<fileset dir="${d}" includes="**/*.properties,**/*.xml,**/*.xsd,**/*.html,**/*.png"/>
			<fileset dir="${d}" includes="META-INF/**/*.*"/>
		</copy>
	</target>

	<target name="compile-test-source">
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			  <classpath>
			  	<fileset dir="${basedir}/temp/buildlib" includes="*.jar" />
			  </classpath>
		</taskdef>
		<updatebuild-macro/>
		<mkdir dir="${classes.target}"/>
		<javac destdir="${classes.target}" debug="on" deprecation="on" target="${javac.compile.target}" srcdir="${testpath}">
			<classpath>
				<path refid="libs"/>
			</classpath>
		</javac>
		<foreach delimiter=":" list="${testpath}" param="d" target="copysource"/>
	</target>

	<target name="junit">
		<mkdir dir="${basedir}/temp/junit"/>
		<echo>${junit.tests}</echo>
		<junit printsummary="yes" showoutput="${junit.show.output}" fork="yes" haltonfailure="yes" >
		  <formatter type="xml" />
		  <classpath>
			<fileset dir="${basedir}/">
		      	<include name="${ant.project.name}.jar"/>
		    </fileset>
			<pathelement location="${classes.target}"/>
			<fileset dir="${basedir}/temp/lib">
		      	<include name="*.jar"/>
		    </fileset>
		  </classpath>
            <batchtest haltonfailure="yes" todir="${basedir}/temp/junit" >
                    <fileset dir="${basedir}/test">
                          <include name="${junit.tests}"/>
                        </fileset>          
            </batchtest>
		</junit>
	</target>

	<target name="jar-meta-inf" depends="compile-distribute-source">
		<mkdir dir="${results.dir}/"/>
		<manifest-macro/>
		<jar jarfile="${results.dir}/${ant.project.name}.jar" index="true" manifest="${results.dir}/MANIFEST.MF">
			<metainf dir="${basedir}/src/META-INF">
				<include name="spring.*"/>
				<include name="services/*.*"/>
			</metainf>
			<fileset dir="${classes.target}">
				<exclude name="**/tests/**"/>
				<exclude name="**/package.html"/>
			</fileset>
			<fileset file="${basedir}/${ant.project.name}.properties"/>
			<fileset file="${basedir}/*.html"/>
		</jar>
	</target>
	
	<target name="jar" depends="compile-distribute-source">
		<mkdir dir="${results.dir}/"/>
		<manifest-macro/>
		<jar jarfile="${results.dir}/${ant.project.name}.jar" index="true" manifest="${results.dir}/MANIFEST.MF">
			<fileset dir="${classes.target}">
				<exclude name="**/tests/**"/>
				<exclude name="**/package.html"/>
			</fileset>
			<fileset file="${basedir}/${ant.project.name}.properties"/>
			<fileset file="${basedir}/*.html"/>
		</jar>
	</target>
	
	<target name="docs">
		<ant antfile="${basedir}/temp/doclib/build-pdf.xml" dir="${basedir}/docs/" target="build_pdf" inheritall="true">
			<property name="build.name" value="${ant.project.name}"/>
			<property name="build.company" value="${build.company}"/>
			<property name="doclib" value="${basedir}/temp/doclib"/>
			<property name="docdir" value="${basedir}/docs"/>
			<property name="docpdf" value="${basedir}/temp/pdf"/>
			<property name="docworking" value="${basedir}/temp/working"/>
			<property name="build.number" value="${build.version}"/>
			<property name="Year" value="${year}"/>
		</ant>			
	</target>

	<target name="retrieve-dependencies" depends="clean,init-ivy">
		<ivy:retrieve conf="default" pattern="${basedir}/temp/lib/[artifact]-[revision].[ext]"/>
		<ivy:retrieve conf="test" pattern="${basedir}/temp/lib/[artifact]-[revision].[ext]"/>
		<ivy:retrieve conf="docs" pattern="${basedir}/temp/doclib/[artifact].[ext]"/>
		<ivy:retrieve conf="build" pattern="${basedir}/temp/buildlib/[artifact].[ext]" />
		<ivy:retrieve conf="compile" pattern="${basedir}/temp/compile/[artifact]-[revision].[ext]" type="jar"/>
	</target>

	<target name="retrieve-dependencies-package" depends="retrieve-dependencies">
		<mkdir dir="${package.target}"/>
		<ivy:retrieve conf="package" pattern="${package.target}/[artifact]-[revision].[ext]" type="jar"/>
	</target>

	<target name="clean">
		<delete file="${ant.project.name}.jar" failonerror="false"/>
		<delete dir="${classes.target}" failonerror="false"/>
		<mkdir dir="${classes.target}"/>
		<delete failonerror="false" dir="${basedir}/temp"/>
		<mkdir dir="${basedir}/temp/lib"/>
		<mkdir dir="${basedir}/temp/doclib"/>
		<mkdir dir="${basedir}/temp/buildlib"/>
		<mkdir dir="${basedir}/temp/pdf"/>
		<mkdir dir="${basedir}/temp/working"/>
		<delete failonerror="false">
			<fileset dir="generated">
			    <include name="**/*.java;**/*.properties;**/*.xml"/>
			</fileset>
		</delete>
	</target>

	<target name="copyToLocalRepo">
		<echo>Copying repo files to ${repo.dir}/${ant.project.name}/${build.version}</echo>
		<mkdir dir="${repo.dir}/${ant.project.name}/${build.version}"/>
		<copy overwrite="true" todir="${repo.dir}/${ant.project.name}/${build.version}">
			<fileset file="${basedir}/temp/package/ivy.xml"/>
			<fileset file="${basedir}/temp/package/packager.xml"/>
		</copy>
		<property file="${classes.target}/${ant.project.name}.properties"/>
		<echo message="Revison Number  ${revision.number}"/>		
		<echo message="Build Date    ${build.date}"/>		
		<echo message="Build Version ${build.version}"/>
	</target>
	
	<target name="make-war">
		<mkdir dir="${basedir}/temp"/>
		<delete file="${basedir}/temp/${project.name}.war" failonerror="false"/>
		<war destfile="${basedir}/temp/${project.name}.war" webxml="${basedir}/WebContent/WEB-INF/web.xml">
			<lib dir="${package.dir}"/>
			<classes dir="${classes.target}" excludes="META-INF/*"/>
			<fileset dir="${basedir}/WebContent/" includes="VAADIN/**"/>
			<fileset dir="${basedir}/" includes="LICENSE*.html"/>
			<metainf dir="generated/META-INF"/>
			<manifest >
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Implementation-Version" 
					value="${build.version}"/>   
				<attribute name="Implementation-Title" 
					value="${project.name}"/>   
				<attribute name="Implementation-Vendor" 
					value="${build.company}"/>   
	  			<attribute name="Built-Date" value="${TODAY}"/>                 
			</manifest>
		</war>
	</target>

</project>